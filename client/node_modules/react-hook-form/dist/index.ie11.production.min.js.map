{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb: boolean,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : cloneObject(defaultValues, isWeb),\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (!error && resolverRef.current) {\n              const parentNodeName = name.substring(\n                0,\n                name.lastIndexOf('.') > name.lastIndexOf('[')\n                  ? name.lastIndexOf('.')\n                  : name.lastIndexOf('['),\n              );\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return compact(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : Array.isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[])\n    .map(mapValueToBoolean)\n    .flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (!!value && keyName in value) {\n        console.warn(\n          `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n        );\n\n        break;\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [],\n  );\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, getFieldArrayValue()).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...getFieldArrayValue()[index],\n        ...item,\n      }),\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends { [k: string]: unknown }[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    const defaultFieldArrayValues = get(defaultValuesRef.current, name, []);\n    const updateDirtyFieldsBaseOnDefaultValues = <U extends T>(\n      base: U,\n      target: U,\n    ) => {\n      for (const key in base) {\n        for (const innerKey in base[key]) {\n          if (\n            innerKey !== keyName &&\n            (!target[key] ||\n              !base[key] ||\n              base[key][innerKey] !== target[key][innerKey])\n          ) {\n            set(formStateRef.current.dirtyFields, `${name}[${key}]`, {\n              ...get(formStateRef.current.dirtyFields, `${name}[${key}]`, {}),\n              [innerKey]: true,\n            });\n          }\n        }\n      }\n    };\n\n    if (updatedFieldArrayValues) {\n      updateDirtyFieldsBaseOnDefaultValues(\n        defaultFieldArrayValues,\n        updatedFieldArrayValues,\n      );\n      updateDirtyFieldsBaseOnDefaultValues(\n        updatedFieldArrayValues,\n        defaultFieldArrayValues,\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends { [k: string]: unknown }[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty: isFormDirty(\n        name,\n        updatedFormValues.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n      ),\n      touched: formStateRef.current.touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...getFieldArrayValue(),\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        value,\n      ]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: { [k: string]: unknown }[] = removeArrayAt(\n      fieldValues,\n      index,\n    );\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(onFocus || (() => ref.current.focus()));\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty(\n          {\n            name,\n            focus: onFocusRef.current,\n          },\n          VALUE,\n          {\n            set(data) {\n              setInputStateValue(data);\n              valueRef.current = data;\n            },\n            get() {\n              return valueRef.current;\n            },\n          },\n        ),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(() => () => unregister(name), [unregister, name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  }, [\n    name,\n    touched,\n    updateFormState,\n    shouldValidate,\n    trigger,\n    readFormStateRef,\n  ]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, commonTask, name, shouldValidate],\n  );\n\n  const commonProps = {\n    onChange,\n    onBlur,\n    name,\n    value,\n    ref,\n  };\n\n  const props = {\n    ...rest,\n    ...commonProps,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render(commonProps)\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          if (isUndefined(field.ref.focus())) {\n            break;\n          }\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : Array.isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value)\n        ? { ...value }\n        : Array.isArray(value)\n        ? [...value]\n        : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","SELECT","defaultResult","validResult","values","map","_a","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","deepMerge","target","source","isPrimitive","targetValue","sourceValue","search","output","name_1","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","keys1_1","__values","includes","val1","val2","RegExp","validationData","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","_b","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","_c","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","entries","_l","__read","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","indexOf","isMatchFieldArrayName","searchName","names","some","cloneObject","isWeb","copy","File","getTime","Set","data_1","Map","mode","isOnSubmit","isOnAll","isWindowUndefined","window","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","mapIds","keyName","generateId","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","focus","onFocusRef","shouldValidate","React.useCallback","skipValidation","commonTask","event","getInputValue","registerField","defineProperty","React.useEffect","onBlur","commonProps","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","focusIndexRef","isFormDirty","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","formStateRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","shouldUnregister","fieldArrayValuesRef","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","defaultFieldArrayValues","updateDirtyFieldsBaseOnDefaultValues","base","innerKey","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","isDirty","argC","argD","reset","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","formState","setFormState","observerRef","_k","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","selected","checkboxRef","formValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","payload_1","getFieldsValues","shouldSkipValidation","parentNodeName","lastIndexOf","currentError","forceDelete","handleChange","fieldRef","options_1","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","name_2","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","refOrValidationOptions","React.useMemo","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"8lFAAA,eAAgBA,GACd,OAAAA,aAAiBC,aCCNC,EACL,OADKA,EAEH,SAFGA,EAGJ,QAGIC,EACH,SADGA,EAED,WAFCA,EAGD,WAHCA,EAIA,YAJAA,EAKN,MASMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WC7BZ,eAAgBJ,GAA8C,OAAS,MAATA,GCEjDK,EAAe,SAACL,GAAmB,MAAiB,iBAAVA,cAErBA,GAChC,OAACM,EAAkBN,KAClBO,MAAMC,QAAQR,IACfK,EAAaL,MACXA,aAAiBS,kBCRLT,GACd,OAACO,MAAMC,QAAQR,KACd,QAAQU,KAAKV,KACX,mDAAmDU,KAAKV,gBCH7CA,GAAiB,OAAAA,EAAMW,OAAOC,qBCE9BC,GACd,OAAAC,EACED,EACGE,QAAQ,SAAU,IAClBA,QAAQ,MAAO,KACfA,QAAQ,MAAO,IACfC,MAAM,gBCHWC,EACtBC,EACAC,EACAnB,GAOA,IALA,IAAIoB,GAAS,EACPC,EAAWC,EAAMH,GAAQ,CAACA,GAAQI,EAAaJ,GAC/CK,EAASH,EAASG,OAClBC,EAAYD,EAAS,IAElBJ,EAAQI,GAAQ,CACvB,IAAME,EAAML,EAASD,GACjBO,EAAW3B,EAEf,GAAIoB,IAAUK,EAAW,CACvB,IAAMG,EAAWV,EAAOQ,GACxBC,EACEE,EAASD,IAAarB,MAAMC,QAAQoB,GAChCA,EACCE,OAAOT,EAASD,EAAQ,IAEzB,GADA,GAGRF,EAAOQ,GAAOC,EACdT,EAASA,EAAOQ,GAElB,OAAOR,EC3BT,eAAgBa,EAAmB/B,GACjC,IAAK,IAAM0B,kBADsB1B,MACf+B,EACfT,EAAMI,GAAqC1B,EAAM0B,GAAOK,EAAKL,GAAhDT,EAAIjB,EAAO0B,EAAKK,EAAKL,IAErC,OAAO1B,cCROgC,GAAmC,YAAQC,IAARD,cCInCE,EAAUf,EAAcgB,GACtC,IAAMC,EAAStB,EAAQK,EAAKH,MAAM,cAAcqB,QAC9C,SAACD,EAAQV,GAAQ,OAACpB,EAAkB8B,GAAUA,EAASA,EAAOV,KAC9DQ,GAGF,OAAOI,EAAYF,IAAWA,IAAWF,EACrCI,EAAYJ,EAAIf,IACdgB,EACAD,EAAIf,GACNiB,cCTJG,EACAC,GAEIC,EAAcF,IAAQA,EAAIG,sBAC5BH,EAAIG,oBAAoBxC,EAAcsC,GACtCD,EAAIG,oBAAoBxC,EAAesC,GACvCD,EAAIG,oBAAoBxC,EAAasC,KCJnCG,EAAkC,CACtCC,SAAS,EACT5C,MAAO,eAGO6C,GACd,OAAAtC,MAAMC,QAAQqC,GACVA,EAAQR,QACN,SAACS,EAAUC,GACT,OAAAA,GAAUA,EAAOR,IAAIS,QACjB,CACEJ,SAAS,EACT5C,MAAO+C,EAAOR,IAAIvC,OAEpB8C,IACNH,GAEFA,cCtBUM,GACd,MAAiB,UAAjBA,EAAQC,iBCDMD,GACd,MAAiB,SAAjBA,EAAQC,iBCDMD,GACd,MAAiB,aAAjBA,EAAQC,iBCAMD,GACd,MAAoBE,oBAApBF,EAAQC,MCIJE,EAAqC,CACzCpD,OAAO,EACP4C,SAAS,GAGLS,EAAc,CAAErD,OAAO,EAAM4C,SAAS,cAE5BC,GACd,GAAItC,MAAMC,QAAQqC,GAAU,CAC1B,GAAIA,EAAQrB,OAAS,EAAG,CACtB,IAAM8B,EAAST,EACZlC,QAAO,SAACoC,GAAW,OAAAA,GAAUA,EAAOR,IAAIS,WACxCO,KAAI,SAACC,GAAuB,sBAC/B,MAAO,CAAExD,MAAOsD,EAAQV,UAAWU,EAAO9B,QAGtC,IAAAgC,EAAiCX,EAAQ,GAAGN,IAA1CS,YAAShD,UAAOyD,eAExB,OAAOT,EACHS,IAAenB,EAAamB,EAAmBzD,OAC7CsC,EAAYtC,IAAoB,KAAVA,EACpBqD,EACA,CAAErD,MAAOA,EAAO4C,SAAS,GAC3BS,EACFD,EAGN,OAAOA,YCxBeM,EACtBC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAQJ,EAAUK,QAAQJ,GAEhC,GAAIG,EAAO,CAEP,IAAAP,EAEEO,MAFK/D,UAAOiE,aACd1B,EACEwB,MAEJ,GAAIE,GAAYH,EACd,OAGF,OAAII,EAAY3B,GACPA,EAAI4B,MAGTC,EAAa7B,GACR8B,EAAcN,EAAMlB,SAAS7C,MAGlCsE,EAAiB/B,GClCvBgC,EDmCkChC,EAAIM,SClCnClC,QAAO,SAAC6C,GAA0B,qBAClCD,KAAI,SAACC,GAAsB,kBDoCxBgB,EAAWjC,GACNkC,EAAiBV,EAAMlB,SAAS7C,MAGlCA,EAGT,GAAI6D,EACF,OAAOa,EAAIb,EAAsBG,QAASJ,YE/CtBe,EAAW1B,GACjC,OAAKA,GAKDA,aAAmBhD,aACrBgD,EAAQ2B,WAAaC,KAAKC,eAKrBH,EAAW1B,EAAQ8B,YCX5B,eAAgB/E,GACd,OAAA6B,EAAS7B,KAAWgF,OAAOC,KAAKjF,GAAOwB,mBCJzBxB,GAAqC,MAAiB,kBAAVA,YCmBpCkF,EAAMhE,EAAaC,GACzC,IAAMgE,EAAa7D,EAAMH,GAAQ,CAACA,GAAQI,EAAaJ,GACjDiE,EACiB,GAArBD,EAAW3D,OAAcN,EAf7B,SAAiBA,EAAaiE,GAK5B,IAJA,IACM3D,EADO2D,EAAWE,MAAM,GAAI,GACd7D,OAChBJ,EAAQ,EAELA,EAAQI,GACbN,EAASoB,EAAYpB,GAAUE,IAAUF,EAAOiE,EAAW/D,MAG7D,OAAOF,EAM6BoE,CAAQpE,EAAQiE,GAC9CzD,EAAMyD,EAAWA,EAAW3D,OAAS,GACvC+D,OAAiBtD,EAEjBmD,UACKA,EAAY1D,GAGrB,IAAK,IAAI8D,EAAI,EAAGA,EAAIL,EAAWE,MAAM,GAAI,GAAG7D,OAAQgE,IAAK,CACvD,IAAIpE,GAAS,EACTqE,OAAYxD,EACVyD,EAAeP,EAAWE,MAAM,IAAKG,EAAI,IACzCG,EAAqBD,EAAalE,OAAS,EAMjD,IAJIgE,EAAI,IACND,EAAiBrE,KAGVE,EAAQsE,EAAalE,QAAQ,CACpC,IAAMoE,EAAOF,EAAatE,GAC1BqE,EAAYA,EAAYA,EAAUG,GAAQ1E,EAAO0E,GAG/CD,IAAuBvE,IACrBS,EAAS4D,IAAcI,EAAcJ,IACpClF,MAAMC,QAAQiF,KACZA,EAAU9E,QACT,SAACoB,GACC,OAACF,EAASE,KAAU8D,EAAc9D,IAAU+D,EAAU/D,MACxDP,UAEN+D,SAAwBA,EAAeK,UAAe1E,EAAO0E,IAG/DL,EAAiBE,GAIrB,OAAOvE,EChDT,IAAM6E,EAAY,SAACC,EAAmBzD,GACpC,OAAAyD,GAAcA,EAAWzD,MAAQA,YCVX0D,EAKtB3C,EACA4C,EACAC,EACApB,EACAqB,GAIA,UAFIhF,GAAS,IAEJA,EAAQkC,EAAO9B,QAAQ,CAC9B,IAAK,IAAME,KAAO4B,EAAOlC,GACnBb,MAAMC,QAAQ8C,EAAOlC,GAAOM,MAC7ByE,EAAY/E,KAAW+E,EAAY/E,GAAS,IAC7C+E,EAAY/E,GAAOM,GAAO,GAC1BuE,EACE3C,EAAOlC,GAAOM,GACdgD,EAAIwB,EAAc9E,IAAU,GAAIM,EAAK,IACrCyE,EAAY/E,GAAOM,GACnByE,EAAY/E,GACZM,IAGFgD,EAAIwB,EAAc9E,IAAU,GAAIM,KAAS4B,EAAOlC,GAAOM,GACnDT,EAAIkF,EAAY/E,IAAU,GAAIM,GAC7ByE,EAAY/E,UACR+E,EAAY/E,YACdM,IAAM,OAIhByE,EAAY3E,QACXuD,UACOA,EAAWqB,GAGtB,OAAOD,EAAY3E,OAAS2E,OAAclE,EC1C5C,eAAgBjC,GAAoC,MAAiB,iBAAVA,cCI3CA,GACd,OAAAM,EAAkBN,KAAWK,EAAaL,aCF5BqG,EAGdC,EAAWC,GACX,GAAIC,EAAYF,IAAWE,EAAYD,GACrC,OAAOA,EAGT,IAAK,IAAM7E,KAAO6E,EAAQ,CACxB,IAAME,EAAcH,EAAO5E,GACrBgF,EAAcH,EAAO7E,GAE3B,IACE4E,EAAO5E,GACJG,EAAS4E,IAAgB5E,EAAS6E,IAClCnG,MAAMC,QAAQiG,IAAgBlG,MAAMC,QAAQkG,GACzCL,EAAUI,EAAaC,GACvBA,EACN,WAGJ,OAAOJ,EChBT,gBACE3C,EACAE,EACAC,EACA6C,GAKA,IAAMC,EAAS,cAEJC,IAEPvE,EAAYqE,KACXG,EAASH,GACNE,EAAKE,WAAWJ,GAChBpG,MAAMC,QAAQmG,IAAWA,EAAOK,MAAK,SAACjF,GAAS,OAAA8E,EAAKE,WAAWhF,UAEnE6E,EAAOC,GAA2CnD,EAChDC,EACAkD,OACA5E,EACA6B,KAXN,IAAK,IAAM+C,KAAQlD,EAAUK,UAAlB6C,GAgBX,OAAOR,EACLY,QAA6BpD,GAAyB,IAAIG,SAAW,KACrEiD,EAAsBL,cClCFM,GACtBC,EACAC,EACAC,WAEA,GAAIb,EAAYW,IAAYX,EAAYY,GACtC,OAAOD,IAAYC,EAGrB,IAAME,EAAQtC,OAAOC,KAAKkC,GACpBI,EAAQvC,OAAOC,KAAKmC,GAE1B,GAAIE,EAAM9F,SAAW+F,EAAM/F,OACzB,OAAO,MAGT,IAAkB,IAAAgG,EAAAC,EAAAH,iCAAO,CAApB,IAAM5F,UACT,IAAM2F,IAAiB,CAAC,MAAO,WAAWK,SAAShG,GAAO,CACxD,IAAMiG,EAAOR,EAAQzF,GACfkG,EAAOR,EAAQ1F,GAErB,IACGG,EAAS8F,IAASpH,MAAMC,QAAQmH,MAChC9F,EAAS+F,IAASrH,MAAMC,QAAQoH,KAC5BV,GAAUS,EAAMC,EAAMP,GACvBM,IAASC,EAEb,OAAO,qGAKb,OAAO,ECnCT,gBAAgB5H,GAAoC,OAAAA,aAAiB6H,oBCQrDC,GACd,OAHoCjG,EADpC7B,EAIe8H,KAHyCC,GAAQ/H,GAI5D8H,EACA,CACE9H,MAAO8H,EACPE,QAAS,IATM,IACrBhI,eCLcA,GACd,MAAiB,mBAAVA,eCIOA,GACd,OAAA8G,EAAS9G,IAAW6B,EAAS7B,IAAUiI,iBAAejI,aCFhCkI,GACtB9F,EACAG,EACAW,GAEA,gBAFAA,cAEIiF,GAAU/F,IAAY0D,EAAU1D,KAAYA,EAC9C,MAAO,CACLc,OACA8E,QAASG,GAAU/F,GAAUA,EAAS,GACtCG,OCPN,gBACEqB,EACAwE,EACAC,EACAnF,EACA8E,SAEA,GAAII,EAA0B,CAC5B,IAAME,EAAQD,EAAOzE,GAErB,cACK0E,IACHC,aACMD,GAASA,EAAMC,MAAQD,EAAMC,MAAQ,YACxCrF,GAAO8E,IAAW,QAKzB,MAAO,gBCIPrE,EACAyE,EACA5E,EAYAK,OAXEtB,QACAiG,QAAOtF,SAAMlD,UACb6C,YACA4F,aACAC,cACAC,cACAC,QACAC,QACAC,YACAC,oOAmCF,OA/BMC,EAASrF,EAAUK,QACnBJ,EAAwCrB,EAAIqB,KAC5C0E,EAA2C,GAC3CW,EAAU7E,EAAa7B,GACvBiC,EAAa0E,EAAgB3G,GAC7B4G,EAAoBF,GAAWzE,EAC/B4E,EAAoB,KAAVpJ,EACVqJ,EAAoBC,GAAaC,KACrC,KACA3F,EACAwE,EACAE,GAEIkB,EAAmB,SACvBC,EACAC,EACAC,EACAC,EACAC,gBADAD,EAAUxJ,gBACVyJ,EAAUzJ,GAEV,IAAM4H,EAAUyB,EAAYC,EAAmBC,EAC/CrB,EAAM1E,MACJV,KAAMuG,EAAYG,EAAUC,EAC5B7B,UACAzF,OAEI8G,EADAI,EACkBG,EACAC,EADS7B,KAMjCS,KACGQ,IAAYzE,IAAe4E,GAAW9I,EAAkBN,KACxD8F,EAAU9F,KAAWA,GACrBwE,IAAeC,EAAiB5B,GAASD,SACzCqG,IAAY5E,EAAcxB,GAASD,WAEhCkH,EAAqD3B,GACzDM,GAEE,CAAEzI,QAASyI,EAAUT,QAASS,GAC9BsB,GAAmBtB,GAJRuB,UAAwBC,YAMnCD,IACF1B,EAAM1E,MACJV,KAAM9C,EACN4H,QAASiC,EACT1H,IAAK4G,IACEH,EAAOpF,GAAgBf,SAAW,IAAI,IAAM,IAAIN,IACnDA,GACD8G,EAAkBjJ,EAAiC6J,KAEnD7B,OACIE,IAKRhI,EAAkBsI,IAAStI,EAAkBuI,KAC5CY,UACAS,UACEC,EAA2CJ,GAAmBlB,GAArDuB,UAAmBC,YAC5BC,EAA2CP,GAAmBnB,GAArD2B,UAAmBC,YAErB,WAATtH,IAAuBA,IAASpB,MAAM9B,IAClCyK,EACHlI,EAAyBmI,eAAiBC,WAAW3K,GACnDM,EAAkB8J,KACrBX,GAAYgB,EAAcL,GAEvB9J,EAAkBiK,KACrBL,GAAYO,EAAcF,KAGtBK,GACHrI,EAAyBsI,aAAe,IAAIpK,KAAKT,GAChD8G,EAASsD,KACXX,GAAYmB,GAAY,IAAInK,KAAK2J,IAE/BtD,EAASyD,KACXL,GAAYU,GAAY,IAAInK,KAAK8J,MAIjCd,KAAaS,KACfV,IACIC,GACFY,EACAG,EACApK,EACAA,GAEGgI,QAMLtB,EAAS9G,IAAWoJ,IAAYV,IAAaC,IACzCmC,GAGFf,GAAmBrB,GAFdqC,YACErB,cAELsB,GAGFjB,GAAmBpB,GAFdsC,YACEtB,cAELuB,GAAclL,EAAMmL,WAAW3J,OAC/BiI,IACHnJ,EAAkByK,KAAmBG,GAAcH,GAChDb,IACH5J,EAAkB2K,KAAmBC,GAAcD,IAElDxB,KAAaS,KACfV,IAAmBC,GAAWC,GAAkBC,IAC3CvB,QAMLU,GAAYM,IACRgC,GAAmDrB,GACvDjB,GADauC,YAAuBC,eAIlCvD,GAAQsD,KAAkBA,GAAa3K,KAAKV,KAC9CsI,EAAM1E,MACJV,KAAM9C,EACN4H,QAASsD,GACT/I,OACG8G,EAAkBjJ,EAAgCkL,KAElDlD,KAMLW,GACI/C,GAAauF,EAAe5H,EAAWC,EAAMC,GAC7C2H,GAAcrC,GAAqBtG,EAAUA,EAAQ,GAAGN,IAAMA,EAEhEkJ,GAAW1C,MACQA,EAAS/C,sBAnDrBsC,UAsDT,OAHMlG,GAASsJ,UACTC,GAAgBzD,GAAiB9F,GAAQoJ,OAG7ClD,EAAM1E,UACD+H,IACAtC,EACDjJ,EACAuL,GAAc3D,WAGbI,MACIE,qBAGFzG,EAASkH,GAAT,aACL6C,GAAmB,4CACeC,GAAApE,EAAAzC,OAAO8G,QAAQ/C,wDAA1CgD,GAAAC,cAACtK,SAAKuK,SACVpG,EAAc+F,KAAsBxD,KAIZ6D,GAAiBjG,mBAAxCkG,GAAiBR,UACjBC,GAAgBzD,GACpBgE,GACAV,GACA9J,OAIAkK,UACKD,IACAtC,EAAkB3H,GAAKiK,GAAc3D,UAGtCI,IACFE,EAAM1E,GAAQgI,uNAKpB,IAAK/F,EAAc+F,MACjBtD,EAAM1E,MACJrB,IAAKiJ,IACFI,KAEAxD,GACH,SAAOE,sBAMf,SAAOA,WChPI6D,GAAU,SACrBhL,EACAmC,GAOA,OAAO0B,OAAO8G,QAAQxI,GACnBC,KAAI,SAACC,OAAAgF,EAAAwD,OAAiB,OANJ,SAAItK,EAAQ1B,EAAU6B,GACzC,IAAMuK,EAAgBvK,EAAcV,MAAQO,EAAWP,MAAQO,MAC/D,OAAO8E,EAAYxG,GAASoM,EAAgBD,GAAQC,EAAepM,GAI5CqM,WAAyBxK,EAASyB,OACxDgJ,KAAKC,EAAAA,gBCARC,EACAC,EACAC,EACAC,EACAC,GAKA,IAAI5M,EAcJ,OAZA0M,EAAYG,IAAIJ,GAEZ5G,EAAc2G,GAChBxM,OAAQiC,GAERjC,EAAQ0E,EAAI8H,EAAaC,IAErB5K,EAAS7B,IAAUO,MAAMC,QAAQR,KACnCmM,GAAQM,EAAWzM,GAAO8M,SAAQ,SAAClJ,GAAS,OAAA8I,EAAYG,IAAIjJ,OAIzDtB,EAAYtC,GACf4M,EACED,EACAjI,EAAIiI,EAAYF,GAClBzM,eCzCUwD,OACduJ,aACAC,eACAC,cACAC,cACAC,uBACAC,yBACAC,gBACAC,gBAaA,oBAEYA,GAAeL,IAChBC,GAAaG,IACbC,EAAcH,EAAqBJ,IACpCM,IACCC,EAAcF,EAAuBJ,IACvCK,gBC5BKzJ,GAAiB,OAAAA,EAAK2J,UAAU,EAAG3J,EAAK4J,QAAQ,OCEnDC,GAAwB,SAAC7J,EAAc8J,GAClD,OAAA7F,QACE,IAAI6F,eAAsB3M,QAAQ,MAAO,OAAOA,QAAQ,MAAO,QAC/DL,KAAKkD,gBAGP+J,EACA/J,GACG,OAAAW,EAAIoJ,GAAOC,MAAK,SAAC5J,GAAY,OAAAyJ,GAAsB7J,EAAMI,gBCRtC6J,GACtB9L,EACA+L,eAEIC,EAEJ,GAAIvH,EAAYzE,IAAU+L,GAAS/L,aAAgBiM,KACjD,OAAOjM,EAGT,GAAIA,aAAgBtB,KAElB,OADAsN,EAAO,IAAItN,KAAKsB,EAAKkM,WAIvB,GAAIlM,aAAgBmM,IAAK,CACvBH,EAAO,IAAIG,QACX,IAAmB,IAAAC,EAAA1G,EAAA1F,iCAAM,CAApB,IAAM6D,UACTmI,EAAKlB,IAAIjH,qGAEX,OAAOmI,EAGT,GAAIhM,aAAgBqM,IAAK,CACvBL,EAAO,IAAIK,QACX,IAAkB,IAAAtE,EAAArC,EAAA1F,EAAKkD,sCAAQ,CAA1B,IAAMvD,UACTqM,EAAK9M,IAAIS,EAAKmM,GAAY9L,EAAK2C,IAAIhD,GAAMoM,sGAE3C,OAAOC,EAKT,IAAK,IAAMrM,KAFXqM,EAAOxN,MAAMC,QAAQuB,GAAQ,GAAK,GAEhBA,EAChBgM,EAAKrM,GAAOmM,GAAY9L,EAAKL,GAAMoM,GAGrC,OAAOC,ECpCT,gBACEM,GAOG,OACHC,YAAaD,GAAQA,IAASlO,EAC9B4M,SAAUsB,IAASlO,EACnB6M,WAAYqB,IAASlO,EACrBoO,QAASF,IAASlO,EAClB8M,UAAWoB,IAASlO,gBCZNoC,GACd,OAAA6B,EAAa7B,IAAQ2G,EAAgB3G,ICmEjCiM,G7CpDmB,oB6CoDQC,OAC3BX,G7CrDmB,oB6CsDhBY,WACNF,KACAlM,EAAYmM,OAAOxO,aAChB0O,GAAiBb,GAAQ,UAAWW,O7CzDjB,oB6CyDiCG,MC1E1D,IAAMC,GAAcC,gBAA2C,MAE/DD,GAAYE,YAAc,iBAEbC,GAAiB,WAG5B,OAAAC,aAAiBJ,mBCPjB,IAAMK,E/CiBiB,oB+ChBdC,YAA4B1O,KAAK2O,MAA4B,IAApBD,YAAYC,MAE9D,MAAO,uCAAuCrO,QAAQ,SAAS,SAAUsO,GACvE,IAAMC,GAAqB,GAAhBC,KAAKC,SAAgBN,GAAK,GAAK,EAE1C,OAAa,KAALG,EAAWC,EAAS,EAAJA,EAAW,GAAKnE,SAAS,QCWrD,gBAAmBpJ,EAAWX,GAC5B,OAAAkB,EAAYlB,GACR,GACAb,MAAMC,QAAQY,GAfpB,SAA4BW,EAAWX,GAGrC,IAFA,IAAIoE,GAAK,IAEAA,EAAIzD,EAAKP,QACZJ,EAAMoM,QAAQhI,IAAM,UACfzD,EAAKyD,GAIhB,OAAO1E,EAAQiB,GAOX0N,CAAgB1N,EAAMX,GArBX,SAAIW,EAAWX,GAAuB,SAClDW,EAAKsD,MAAM,EAAGjE,GACdW,EAAKsD,MAAMjE,EAAQ,IAoBlBsO,CAAS3N,EAAMX,gBCtBnBW,EACA4N,EACAC,GAEA,OAAIrP,MAAMC,QAAQuB,IACZO,EAAYP,EAAK6N,MACnB7N,EAAK6N,QAAM3N,GAEbF,EAAK8N,OAAOD,EAAI,EAAG7N,EAAK8N,OAAOF,EAAM,GAAG,IACjC5N,GAGF,gBCfUA,EAAW+N,EAAgBC,GAC5C,IAAMC,EAAO,CAACjO,EAAKgO,GAAShO,EAAK+N,IACjC/N,EAAK+N,GAAUE,EAAK,GACpBjO,EAAKgO,GAAUC,EAAK,aCDEC,GACtBlO,EACA/B,GAEA,SAAYO,MAAMC,QAAQR,GAASA,EAAQ,CAACA,QAASiC,GAAgBF,YCA/CmO,GACtBnO,EACAX,EACApB,GAEA,SACK+B,EAAKsD,MAAM,EAAGjE,GACbb,MAAMC,QAAQR,GAASA,EAAQ,CAACA,QAASiC,GAC1CF,EAAKsD,MAAMjE,ICdlB,gBAAmBpB,GACjB,OAAAO,MAAMC,QAAQR,GAASO,MAAMP,EAAMwB,QAAQ2O,UAAKlO,QAAaA,GCC/D,SAASmO,GAAqBpQ,GAC5B,GAAI6B,EAAS7B,GAAQ,CACnB,IAAMkB,EAAkC,GAExC,IAAK,IAAMQ,KAAO1B,EAChBkB,EAAOQ,IAAO,EAGhB,MAAO,CAACR,GAGV,MAAO,EAAC,GAGV,gBAAmBlB,GACjB,OAAEO,MAAMC,QAAQR,GAASA,EAAQ,CAACA,IAC/BuD,IAAI6M,IACJ9D,QCQC+D,GAAS,SAIb/M,EACAgN,GAcA,oBAfAhN,MAeOA,EAAOC,KAAI,SAACvD,SAAsC,iBACtDsQ,GAAUC,QACRvQ,0BCpCY,SAQjBwD,GACA,IAAAI,SACA4M,UACAC,OACAC,WACAvO,iBACAwO,YACAC,YACGC,MARH,mEAUMC,EAAU9B,KAUVxG,EAgBFmI,GAAWG,EAAQH,QAfrBI,qBACAC,aACAC,aACAC,eACAC,YACA9C,SACAvE,mBAAkBqD,uBAAoBC,yBAEpCjD,yBAAWmD,gBAAa8D,YAE1BC,oBACAC,qBACA3N,cACA4N,uBACA1N,0BAEI2N,GAAmBC,GAAmBF,EAAmBvN,QAASJ,GAClE8N,EAAkB,WACtB,OAACpP,EAAYoC,EAAIb,EAAsBG,QAASJ,KAAU4N,EACtD9M,EAAIb,EAAsBG,QAASJ,GACnCtB,EAAYH,GACZuC,EAAIqM,EAAiB/M,QAASJ,GAC9BzB,GACAmI,EAAA0B,EAA8B2F,WAAeD,QAA5C1R,OAAO4R,OACRC,EAAWC,SAAa9R,GACxBuC,EAAMuP,SAAa,CACvBC,MAAO,WAAM,OAAA,QAETC,EAAaF,SAAalB,cAAkB,OAAArO,EAAIyB,QAAQ+N,UAExDE,EAAiBC,eACrB,SAAC7E,GACC,OAAC8E,MACC9E,cACAF,qBACAC,uBACAE,cACAJ,YAAaxI,EAAI0M,EAASxN,IACvByK,MAEP,CACElB,EACAC,EACAE,EACA8D,EACAxN,EACAyK,IAIE+D,EAAaF,eAAkB,SAAC1O,OAC9BzB,WCxFMsQ,GACd,OAAA7L,EAAY6L,KACXxQ,EAASwQ,EAAM/L,SACfzE,EAASwQ,EAAM/L,UAAY+L,EAAMnP,KAC9BmP,EACA/P,EAAY+P,EAAM/L,OAAOtG,OACzBqS,EAAM/L,OAAOtD,QACbqP,EAAM/L,OAAOtG,MDiFFsS,CADuBtG,WAIpC,OAFA4F,EAAmB7P,GACnB8P,EAAS7N,QAAUjC,EACZA,IACN,IAEGwQ,EAAgBL,eAAkB,WAOlCvO,EAAUK,QAAQJ,GACpBD,EAAUK,QAAQJ,MAChBrB,IAAKoB,EAAUK,QAAQJ,GAAOrB,KAC3BiO,IAGLS,EACEjM,OAAOwN,eACL,CACE5O,OACAmO,MAAOC,EAAWhO,SxDnGT,QwDsGX,CACE/C,aAAIc,GACF6P,EAAmB7P,GACnB8P,EAAS7N,QAAUjC,GAErB2C,eACE,OAAOmN,EAAS7N,WAItBwM,GAEEgB,IAAoB9M,EAAIqM,EAAiB/M,QAASJ,IACpDgO,EAAmBF,QAGtB,CAAClB,EAAO5M,EAAMqN,IAEjBwB,aAAgB,WAAM,OAAA,WAAM,OAAAvB,EAAWtN,MAAO,CAACsN,EAAYtN,IAE3D6O,aAAgB,WAqBdF,MACC,CAACA,IAEJE,aAAgB,WACT9O,EAAUK,QAAQJ,KACrB2O,IACIf,GACFI,EAAmBF,SAKzB,IAAMgB,EAASR,eAAkB,WAC3BZ,EAAiBtN,QAAQoN,UAAY1M,EAAI0M,EAASxN,KACpD3C,EAAImQ,EAASxN,GAAM,GACnByN,EAAgB,CACdD,aAIAa,GAAe,IACjBd,EAAQvN,KAET,CACDA,EACAwN,EACAC,EACAY,EACAd,EACAG,IAYIqB,EAAc,CAClBC,SAVeV,eACf,eAAC,aAAAW,mBAAAA,IAAAR,kBACC,OAAArB,EAASpN,EAAMwO,EAAWC,GAAQ,CAChCJ,eAAgBA,IAChBa,aAAa,MAEjB,CAAC9B,EAAUoB,EAAYxO,EAAMqO,IAK7BS,SACA9O,OACA5D,QACAuC,OAGIwQ,SACDlC,GACA8B,GAGL,OAAOlC,EACHuC,iBAAqBvC,GACnBwC,eAAmBxC,EAAIsC,GACvBG,gBAAoBzC,EAAcsC,GACpCrC,EACAA,EAAOiC,GACP,2BV/MsB,SAAmCnP,GAC7D,IAAA2P,aACGJ,MAF0D,cAGxB,OACrCG,gBAACrE,GAAYuE,UAASpT,MAAOqT,KAAKN,IAC/BI,gGSmCwB,SAI3B3P,OACAmN,YACA/M,SACA4E,YAAA8H,aAAU,OAKJQ,EAAU9B,KAUVsE,EAAgBxB,UAAc,GAC9BhI,EAmBF6G,GAAWG,EAAQH,QAlBrB4C,gBACAC,uBACAC,+BACAlC,uBACA5N,cACAoN,qBACA2C,6BACAC,iBACA9P,0BACAwN,oBACAC,qBACAsC,mBACAC,4BACAC,+BACAC,qBACAC,cACAC,qBACAC,wBAGIC,EAAuBC,GAAwBxQ,GAC/CyQ,EAAwBvC,WACxBpN,EAAIoP,EAA2B9P,QAASmQ,GACxCzP,EAAIoP,EAA2B9P,QAASJ,EAAM,IAC9Cc,EACEuP,EACIlD,EAAiB/M,QACjBH,EAAsBG,QAC1BJ,EACA,MAGFuG,EAAA6B,EAAsB2F,WAE1BtB,GAAOgE,EAAsBrQ,QAASsM,OAFjCtH,OAAQsL,OAGfrT,EAAIiT,EAAoBlQ,QAASJ,EAAMoF,GAEvC,IAAMuL,EAAqBrC,eACzB,WAAM,OAAAxN,EAAIwP,EAAoBlQ,QAASJ,EAAM,MAC7C,IAGI4Q,EAAyB,WAC7B,OAAA9P,EAAIsP,IAAapQ,EAAM2Q,KAAsBhR,KAC3C,SAACqC,EAAkCxE,GAAkB,cAChDmT,IAAqBnT,IACrBwE,OAIT2L,EAAmBvN,QAAQ6I,IAAIjJ,GAE1Bc,EAAIoP,EAA2B9P,QAASmQ,IAC3ClT,EACE6S,EAA2B9P,QAC3BmQ,EACAzP,EAAIqM,EAAiB/M,QAASmQ,IAIlC,IAAMM,EAAwB,SAC5BC,GAKA,GAHAJ,EAAUI,GACVzT,EAAIiT,EAAoBlQ,QAASJ,EAAM8Q,GAEnCpD,EAAiBtN,QAAQpB,SAAWmR,EAAkB,CACxD,IAAMzQ,EAAS0Q,IACf/S,EAAIqC,EAAQM,EAAM8Q,GAClBX,EAAiBzQ,KAIfqR,EAAc,WAClB,IAAK,IAAMjT,KAAOiC,EAAUK,QAC1ByJ,GAAsB/L,EAAKkC,IACzB8P,EAAyB/P,EAAUK,QAAQtC,IAAe,IAI1DkT,EAAU,SAAIrS,GAClB,OAACzB,EAAQ4D,EAAInC,EAAKqB,EAAM,KAAKpC,QAAU0D,EAAM3C,EAAKqB,IAE9CiR,EAAqC,SAGzCC,GAEA,IAAMC,EAA0BrQ,EAAIqM,EAAiB/M,QAASJ,EAAM,IAC9DoR,EAAuC,SAC3CC,EACA3O,SAEA,IAAK,IAAM5E,KAAOuT,EAChB,IAAK,IAAMC,KAAYD,EAAKvT,GAExBwT,IAAa5E,GACXhK,EAAO5E,IACNuT,EAAKvT,IACNuT,EAAKvT,GAAKwT,KAAc5O,EAAO5E,GAAKwT,IAEtCjU,EAAI0S,EAAa3P,QAAQmC,YAAgBvC,MAAQlC,aAC5CgD,EAAIiP,EAAa3P,QAAQmC,YAAgBvC,MAAQlC,MAAQ,aAC3DwT,IAAW,QAOlBJ,IACFE,EACED,EACAD,GAEFE,EACEF,EACAC,KAKAI,EAAmB,SAIvBC,EACAC,EAMAC,EACAC,EACAC,EACAC,GAEA,gBAJAF,mBACAC,mBACAC,MAEI/Q,EAAIb,EAAsBG,QAASJ,GAAO,CAC5C,IAAMgD,EAASwO,EACb1Q,EAAIb,EAAsBG,QAASJ,GACnCyR,EAAKK,KACLL,EAAKM,MAEPH,GAAavU,EAAI4C,EAAsBG,QAASJ,EAAMgD,GAGxD,GAAIlC,EAAIoP,EAA2B9P,QAASJ,GAAO,CAC3CgD,EAASwO,EACb1Q,EAAIoP,EAA2B9P,QAASJ,GACxCyR,EAAKK,KACLL,EAAKM,MAEPH,GAAavU,EAAI6S,EAA2B9P,QAASJ,EAAMgD,GAC3DgO,EAAQd,EAA2B9P,SAGrC,GAAIzD,MAAMC,QAAQkE,EAAIiP,EAAa3P,QAAQqE,OAAQzE,IAAQ,CACnDgD,EAASwO,EACb1Q,EAAIiP,EAAa3P,QAAQqE,OAAQzE,GACjCyR,EAAKK,KACLL,EAAKM,MAEPH,GAAavU,EAAI0S,EAAa3P,QAAQqE,OAAQzE,EAAMgD,GACpDgO,EAAQjB,EAAa3P,QAAQqE,QAG/B,GACEiJ,EAAiBtN,QAAQoN,SACzB1M,EAAIiP,EAAa3P,QAAQoN,QAASxN,GAClC,CACMgD,EAASwO,EACb1Q,EAAIiP,EAAa3P,QAAQoN,QAASxN,GAClCyR,EAAKK,KACLL,EAAKM,MAEPH,GAAavU,EAAI0S,EAAa3P,QAAQoN,QAASxN,EAAMgD,GACrDgO,EAAQjB,EAAa3P,QAAQoN,SAG/B,GACEE,EAAiBtN,QAAQmC,aACzBmL,EAAiBtN,QAAQ4R,QACzB,CACMhP,EAASwO,EACb1Q,EAAIiP,EAAa3P,QAAQmC,YAAavC,EAAM,IAC5CyR,EAAKQ,KACLR,EAAKS,MAEPN,GAAavU,EAAI0S,EAAa3P,QAAQmC,YAAavC,EAAMgD,GACzDiO,EAAmCS,GACnCV,EAAQjB,EAAa3P,QAAQmC,aAI7BsP,GACAnE,EAAiBtN,QAAQpB,UACxBmR,IAED9S,EACE2S,EAAe5P,QACfJ,EACAwR,EAAO1Q,EAAIkP,EAAe5P,QAASJ,EAAM,IAAKyR,EAAKK,OAErDd,EAAQhB,EAAe5P,SAEvB/C,EACE4S,EAAwB7P,QACxBJ,EACAwR,EAAO1Q,EAAImP,EAAwB7P,QAASJ,EAAM,IAAKyR,EAAKK,OAE9Dd,EAAQf,EAAwB7P,UAGlCqN,EAAgB,CACdhJ,OAAQsL,EAAa3P,QAAQqE,OAC7BlC,YAAawN,EAAa3P,QAAQmC,YAClCyP,QAASrC,EACP3P,EACA2R,EAAkBhS,KAAI,SAACC,gBAAAA,UAAEgF,EAAC8H,OAAsC,WAAzC,iCAEzBc,QAASuC,EAAa3P,QAAQoN,WAmJ5B2E,EAAQ,SACZhU,GAEA4S,KACC5S,GAAQmD,EAAM4O,EAA2B9P,QAASJ,GACnDsB,EAAMrB,EAAsBG,QAASJ,GACrCyQ,EAAsBrQ,QAAUU,EAAI3C,GAAQgP,EAAiB/M,QAASJ,GACtE0Q,EAAUjE,GAAOgE,EAAsBrQ,QAASsM,KAqDlD,OAlDAmC,aAAgB,WASd,IAAMvM,EAAgBxB,EAAIoP,EAA2B9P,QAASJ,GAS9D,GAPIsC,GAAiB8C,EAAOxH,OAAS0E,EAAc1E,SACjD0E,EAAc8P,MACd/U,EAAI6S,EAA2B9P,QAASJ,EAAMsC,IAGhDsN,EAAmB5P,GAEf0P,EAActP,SAAW,EAC3B,IAAK,IAAMtC,KAAOiC,EAAUK,QAAS,CACnC,IAAMD,EAAQJ,EAAUK,QAAQtC,GAChC,GACEA,EAAIqF,WAAcnD,MAAQ0P,EAActP,cACxCD,EAAOxB,IAAIwP,MACX,CACAhO,EAAOxB,IAAIwP,QACX,OAKNuB,EAActP,SAAW,IACxB,CAACgF,EAAQpF,IAEZ6O,aAAgB,WACd,IAAMwD,EAAiBxC,EAA2BzP,QAC5CkS,EAAkB3E,EAAmBvN,QAM3C,OAJKoQ,GAAwBxQ,KAC3BqS,EAAerS,GAAQmS,GAGlB,WACLpB,WACOsB,EAAerS,GACtBsB,EAAMgP,EAAqBtQ,GAC3BsS,EAAgBC,OAAOvS,MAExB,IAEI,CACLwS,KAAMlE,eAnGK,SAACpC,EAAgBC,GAC5B,IAAMvD,EAAcgI,IACpB6B,GAAY7J,EAAasD,EAAQC,GACjC4E,IACAF,IAA0BjI,IAC1B2I,EACEkB,GACA,CACEX,KAAM5F,EACN6F,KAAM5F,EACN8F,KAAM/F,EACNgG,KAAM/F,QAER9N,EACAuK,GACA,KAoF4B,CAAC5I,IAC/B0S,KAAMpE,eAjFK,SAACvC,EAAcC,GAC1B,IAAMpD,EAAcgI,IACpB+B,GAAY/J,EAAamD,EAAMC,GAC/B+E,IACAF,IAA0BjI,IAC1B2I,EACEoB,GACA,CACEb,KAAM/F,EACNgG,KAAM/F,EACNiG,KAAMlG,EACNmG,KAAMlG,QAER3N,EACAuK,GACA,KAkE4B,CAAC5I,IAC/BqM,QAASiC,eAhLK,SACdlS,EACAwW,gBAAAA,MAEA,IAAMC,EAAaC,GAAe1W,GAC5B8U,EAA0B6B,GAC9BnC,IACAnE,GAAO9P,MAAMC,QAAQR,GAASA,EAAQ,CAACA,GAAQsQ,IAGjDmE,EAAsBK,GACtBH,IACAQ,EACEwB,GACA,CACEjB,KAAMe,EACNZ,KAAMe,GAAiB5W,IAEzB8U,GAEFxB,EAActP,QAAUwS,EAAc,GAAK,IA4JP,CAAC5S,IACrCiT,OAAQ3E,eA/MK,SACblS,EACAwW,gBAAAA,MAEA,IAAMM,IACDvC,IACAlE,GAAO9P,MAAMC,QAAQR,GAASA,EAAQ,CAACA,GAAQsQ,IAEpDmE,EAAsBqC,IAGpBxF,EAAiBtN,QAAQmC,aACzBmL,EAAiBtN,QAAQ4R,WAEzBf,EAAmCiC,GAEnCzF,EAAgB,CACduE,SAAS,EACTzP,YAAawN,EAAa3P,QAAQmC,gBAIrC8N,GACChT,EAAI4C,EAAsBG,QAASJ,IAC7Bc,EAAIb,EAAsBG,QAASJ,IAAS,IAChD5D,KAEJsT,EAActP,QAAUwS,EAAcxN,EAAOxH,QAAU,IAoLrB,CAACoC,IACnCmT,OAAQ7E,eA3JK,SAAC9Q,GACd,IAAMoL,EAAcgI,IACdc,EAAiD0B,GACrDxK,EACApL,GAEFqT,EACEa,GAEFX,IACAQ,EACE6B,GACA,CACEtB,KAAMtU,EACNyU,KAAMzU,GAERkU,EACA0B,GAAcxK,EAAapL,IAC3B,GACA,KAwIgC,CAACwC,IACnCsM,OAAQgC,eArIK,SACb9Q,EACApB,EACAwW,gBAAAA,MAEA,IAAMC,EAAaC,GAAe1W,GAC5BwM,EAAcgI,IACdM,EAA0BmC,GAC9BzK,EACApL,EACAiP,GAAO9P,MAAMC,QAAQR,GAASA,EAAQ,CAACA,GAAQsQ,IAGjDmE,EAAsBK,GACtBH,IACAQ,EACE8B,GACA,CACEvB,KAAMtU,EACNuU,KAAMc,EACNZ,KAAMzU,EACN0U,KAAMc,GAAiB5W,IAEzB8U,EACAmC,GAASzK,EAAapL,IAExBkS,EAActP,QAAUwS,EAAcpV,GAAS,IA2Gb,CAACwC,IACnCoF,oCV7aFxF,GAHF,WAGEgF,aAS0C,KAR1CsB,SAAAuE,aAAOlO,IACPgK,mBAAA+M,aAAiB/W,IACjBgX,aACAC,YACA9M,kBAAApE,aAAgB,KAChB4E,qBAAAuM,gBACArM,qBAAAiJ,gBACAqD,iBAEM3T,EAAYmO,SAAsC,IAClDgC,EAA6BhC,SAEjC,IACIoC,EAAsBpC,SAE1B,IACIyF,GAAiBzF,SAA4C,IAAI5D,KACjEsJ,GAAoB1F,SAExB,IACI2F,GAA6B3F,SACjC,IAEI+B,GAA0B/B,SAE9B,IACI8B,GAAiB9B,SACrB,IAEIf,GAAmBe,SACvB5L,GAEIwR,GAA2B5F,SAE/B,IACI6F,GAAY7F,UAAa,GACzB8F,GAAgB9F,UAAa,GAC7B+F,GAAkB/F,WAClBjO,GAAwBiO,SAC5BmC,EAAmB,GAAKpG,GAAY3H,EAAe4H,KAE/C2F,GAA6B3B,SAKjC,IACIgG,GAAahG,SAAasF,GAC1BW,GAAcjG,SAAaqF,GAC3B5F,GAAqBO,SACzB,IAAI5D,KAEA8J,GAAUlG,SAAamG,GAAY5J,IACnCjD,GAA4B4M,GAAQhU,QAAlCsK,iBAAYrB,gBACdiL,GAA6BZ,IAAiBnX,EAC9C0L,GAAAG,EAA4B2F,WAAwC,CACxEiE,SAAS,EACTzP,YAAa,GACbmH,aAAa,EACb6K,YAAa,EACb/G,QAAS,GACTgH,cAAc,EACdC,oBAAoB,EACpBzV,SAAU0L,GACVjG,OAAQ,QATHiQ,SAAWC,SAWZjH,GAAmBQ,SAA4B,CACnD8D,SAAUjH,GACVxI,aAAcwI,GACdyC,SAAUzC,IAAkB1B,GAC5BmL,cAAezJ,GACf/L,SAAU+L,KAENgF,GAAe7B,SAAawG,IAC5BE,GAAc1G,WACd2G,GAGF3G,SAAamG,GAAYf,IAAiBlT,QAFlCmJ,eACEC,iBAGd0K,GAAW9T,QAAUoT,EACrBW,GAAY/T,QAAUmT,EACtBxD,GAAa3P,QAAUsU,GAEvB,IAAMjH,GAAkBa,eACtB,SAACwG,GACC,oBADDA,OACEf,GAAU3T,SACXuU,UACK5E,GAAa3P,SACb0U,MAEP,IAGIC,GAA0BzG,eAC9B,SACEtO,EACA0E,EACAsQ,EACAF,EAKA9V,gBANAgW,mBACAF,MAOA,IAAIG,EACFD,YanLsEpV,OAC5E6E,WACAzE,SACA0E,UACAwQ,gBACAC,yBAQMnW,EAAUN,EAAYgG,GACtB0Q,EAAgBtU,EAAI2D,EAAQzE,GAElC,OACGhB,KAAaoW,IACZpW,IAAYsE,GAAU8R,EAAe1Q,GAAO,IAC7C1F,GAAW8B,EAAIqU,EAAsBnV,KAAUc,EAAIoU,EAAalV,GbiK7DqV,CAAkC,CAChC5Q,OAAQsL,GAAa3P,QAAQqE,OAC7BC,QACA1E,OACAkV,YAAalF,GAAe5P,QAC5B+U,qBAAsBlF,GAAwB7P,UAE5CgV,EAAgBtU,EAAIiP,GAAa3P,QAAQqE,OAAQzE,GAEnD0E,GACFpD,EAAM0O,GAAe5P,QAASJ,GAC9BiV,EACEA,IACCG,IACA9R,GAAU8R,EAAe1Q,GAAO,GACnCrH,EAAI0S,GAAa3P,QAAQqE,OAAQzE,EAAM0E,MAEnC5D,EAAImP,GAAwB7P,QAASJ,IAASmU,GAAY/T,WAC5D/C,EAAI2S,GAAe5P,QAASJ,GAAM,GAClCiV,EAAiBA,GAAkBG,GAGrC9T,EAAMyO,GAAa3P,QAAQqE,OAAQzE,KAIlCiV,IAAmBvY,EAAkBsY,KACrC/S,EAAc6S,KAEfrH,YACKqH,IACHrQ,OAAQsL,GAAa3P,QAAQqE,SACzB0P,GAAY/T,QAAU,CAAEpB,UAAWA,GAAY,OAIzD,IAGIsW,GAAgBhH,eACpB,SACEtO,EACAuV,GAQM,IAAA3V,EAAmBG,EAAUK,QAAQJ,GAAnCrB,QAAKM,YACP7C,EACJ8N,IAASrL,EAAcF,IAAQjC,EAAkB6Y,GAC7C,GACAA,EAEF/U,EAAa7B,IAAQM,EACvBA,EAAQiK,SACN,SAACtJ,OAAO4V,QACN,OAACA,EAASpW,QAAUoW,EAASpZ,QAAUA,KAElCkE,EAAY3B,KAASuE,EAAS9G,GACvCuC,EAAI4B,MAAQnE,EACHsE,EAAiB/B,GAC1BgC,EAAIhC,EAAIM,SAASiK,SACf,SAACuM,GACC,OAACA,EAAUC,SAAYtZ,EAAmB0H,SACxC2R,EAAUrZ,UAGPkJ,EAAgB3G,IAAQM,EACjCA,EAAQrB,OAAS,EACbqB,EAAQiK,SACN,SAACtJ,OAAO+V,QACN,OAACA,EAAYvW,QAAUzC,MAAMC,QAAQR,KAC9BA,EAAagH,MACd,SAACjF,GAAiB,OAAAA,IAASwX,EAAYvZ,SAEzCA,IAAUuZ,EAAYvZ,SAE7B6C,EAAQ,GAAGN,IAAIS,UAAYhD,EAEhCuC,EAAIvC,MAAQA,IAGhB,IAGIuT,GAAcrB,eAClB,SAACtO,EAAe7B,GACd,GACEuP,GAAiBtN,QAAQ4R,SACzBtE,GAAiBtN,QAAQmC,YACzB,CACA,IAAMqT,EAAaxF,KAInB,OAFApQ,GAAQ7B,GAAQd,EAAIuY,EAAY5V,EAAM7B,IAE9BmF,GACNsS,EACA3T,EAAckL,GAAiB/M,SAC3B0T,GAAyB1T,QACzB+M,GAAiB/M,SAIzB,OAAO,IAET,IAGIyV,GAAyBvH,eAC7B,SACEtO,EACAgV,GAMA,gBANAA,MAOEtH,GAAiBtN,QAAQ4R,SACzBtE,GAAiBtN,QAAQmC,YACzB,CACA,IAAMuT,GAAgBxS,GACpBxC,EAAIgT,GAAyB1T,QAASJ,GACtCF,EAAcC,EAAWC,EAAMC,KAE3B8V,EAAoBjV,EAAIiP,GAAa3P,QAAQmC,YAAavC,GAC1DgW,EAAkBjG,GAAa3P,QAAQ4R,QAE7C8D,EACIzY,EAAI0S,GAAa3P,QAAQmC,YAAavC,GAAM,GAC5CsB,EAAMyO,GAAa3P,QAAQmC,YAAavC,GAE5C,IAAM8U,EAAQ,CACZ9C,QAASrC,KACTpN,YAAawN,GAAa3P,QAAQmC,aAG9B0T,EACHvI,GAAiBtN,QAAQ4R,SACxBgE,IAAoBlB,EAAM9C,SAC3BtE,GAAiBtN,QAAQmC,aACxBwT,IAAsBjV,EAAIiP,GAAa3P,QAAQmC,YAAavC,GAYhE,OAVIiW,GAAajB,IACfjF,GAAa3P,eACR2P,GAAa3P,SACb0U,GAELrH,QACKqH,KAIAmB,EAAYnB,EAAQ,GAG7B,MAAO,KAET,IAGIoB,GAAoB5H,eACxB,SACEtO,EACAmW,uGAEIpW,EAAUK,QAAQJ,MAEZoW,GACJrW,EACAuU,GACAvU,EAAUK,QAAQJ,GAClBC,kBAMJ,OAXMyE,EACJ9E,SAMAI,GAEF+U,GAAwB/U,EAAM0E,EAAOyR,MAE9BzX,EAAYgG,WAGrB,UAAO,YAET,CAACqQ,GAAyBT,KAGtB+B,GAAoC/H,eACxC,SACEvE,sGAImB,SAAMoK,GAAY/T,QACnCgQ,KACA8D,GAAW9T,QACXkU,YAIF,OAPQ7P,EAAW7E,gBAKb0W,EAAsBvG,GAAa3P,QAAQpB,QAE7CrC,MAAMC,QAAQmN,IACVwM,EAAgBxM,EACnBpK,KAAI,SAACK,GACJ,IAAM0E,EAAQ5D,EAAI2D,EAAQzE,GAM1B,OAJA0E,EACIrH,EAAI0S,GAAa3P,QAAQqE,OAAQzE,EAAM0E,GACvCpD,EAAMyO,GAAa3P,QAAQqE,OAAQzE,IAE/B0E,KAET8R,MAAMxZ,SAETyQ,GAAgB,CACdzO,QAASiD,EAAcwC,GACvBA,OAAQsL,GAAa3P,QAAQqE,YAGxB8R,KAED7R,EAAQ5D,EAAI2D,EAAQsF,GAE1BgL,GACEhL,EACArF,EACA4R,IAAwBrU,EAAcwC,GACtC,GACAxC,EAAcwC,QAGRC,aAGZ,CAACqQ,GAAyBT,KAGtB/G,GAAUe,eACd,SACEtO,yGAIA,OAFMoF,EAASpF,GAAQoB,OAAOC,KAAKtB,EAAUK,SAEzC+T,GAAY/T,WACPiW,GAAkCjR,IAGvCzI,MAAMC,QAAQwI,KACfpF,IAAS+P,GAAa3P,QAAQqE,OAAS,OACnBgS,QAAQC,IAC3BtR,EAAOzF,KAAI,SAAOxB,0FAAS,SAAM+X,GAAkB/X,EAAM,cAA9B,SAAAyB,oCAG7B,OAJMpB,EAASoB,SAGf6N,QACOjP,EAAOgY,MAAMxZ,iBAGf,SAAMkZ,GAAkB9Q,EAAQsI,GAAiBtN,QAAQpB,iBAAhE,SAAOY,mBAET,CAACyW,GAAmCH,KAGhCS,GAAoBrI,eACxB,SACEtO,EACA5D,EACAwD,WAAEsP,gBAAab,mBAETlQ,EAAO,GACbd,EAAIc,EAAM6B,EAAM5D,OAEhB,IAAwB,IAAA8J,EAAArC,EAAA0E,GAAQvI,EAAM5D,kCAAQ,CAAzC,IAAMyM,UACL9I,EAAUK,QAAQyI,KACpByM,GAAczM,EAAW/H,EAAI3C,EAAM0K,IACnCqG,GAAe2G,GAAuBhN,GACtCwF,GAAkBd,GAAQ1E,yGAIhC,CAAC0E,GAAS+H,GAAeO,KAGrBe,GAAmBtI,eACvB,SACEtO,EACA5D,EACAya,wBAAAA,MAEI9W,EAAUK,QAAQJ,IACpBsV,GAActV,EAAM5D,GACpBya,EAAO3H,aAAe2G,GAAuB7V,IACnC4C,EAAYxG,KACtBua,GAAkB3W,EAAM5D,EAAOya,GAE3BlJ,GAAmBvN,QAAQ0W,IAAI9W,KACjCkQ,EAA2B9P,QAAQJ,GAAQ5D,EAC3CyT,GAA2BzP,QAAQJ,KAAMJ,MACtCI,GAAO5D,OAIPsR,GAAiBtN,QAAQ4R,SACxBtE,GAAiBtN,QAAQmC,cAC3BsU,EAAO3H,cAEP7R,EACE0S,GAAa3P,QAAQmC,YACrBvC,EACAqC,EACEjG,EACA0E,EAAIqM,GAAiB/M,QAASJ,EAAM,IACpCc,EAAIiP,GAAa3P,QAAQmC,YAAavC,EAAM,MAIhDyN,GAAgB,CACduE,SAAU1O,UACH8M,cAAcpQ,GAAO5D,MAC1B+Q,GAAiB/M,SAEnBmC,YAAawN,GAAa3P,QAAQmC,kBAMzC8N,GAAoBhT,EAAI4C,GAAsBG,QAASJ,EAAM5D,KAEhE,CAACyZ,GAAwBP,GAAeqB,KAGpCI,GAAiB,SAAC/W,GACtB,OAAAgU,GAAc5T,SACduT,GAAevT,QAAQ0W,IAAI9W,IAC3B2T,GAAevT,QAAQ0W,KAAK9W,EAAKgX,MAAM,QAAU,IAAI,KAEjDC,GAAsB,SAACjX,EAAckX,GACzC,gBADyCA,OACpCjV,EAAc2R,GAAkBxT,SACnC,IAAK,IAAMtC,KAAO8V,GAAkBxT,QAE/BJ,GACA4T,GAAkBxT,QAAQtC,GAAKqZ,OAChCvD,GAAkBxT,QAAQtC,GAAKgZ,IAAI9W,KACnC4T,GAAkBxT,QAAQtC,GAAKgZ,IAAItG,GAAwBxQ,MAE3D6T,GAA2BzT,QAAQtC,KACnCoZ,GAAQ,GAKd,OAAOA,GAgHT,SAASE,GAAkDjZ,aACzD,IAAKkS,EAAkB,CACrB,IAAIlG,EAAOF,GAAY9L,EAAM+L,QAE7B,IAAoB,IAAAhE,EAAArC,EAAA8J,GAAmBvN,uCAAS,CAA3C,IAAMhE,UACLsB,EAAMtB,KAAW+N,EAAK/N,KACxB+N,SACKA,WACF/N,GAAQ,0GAKf,OAAO+N,EAET,OAAOhM,EAYT,SAASiS,GAAUiH,WACjB,GAAInU,EAASmU,GACX,OAAOvX,EAAcC,EAAWsX,EAASpX,IAG3C,GAAItD,MAAMC,QAAQya,GAAU,CAC1B,IAAMlZ,EAAO,OAEb,IAAmB,IAAAmZ,EAAAzT,EAAAwT,iCAAS,CAAvB,IAAMpU,UACT5F,EAAIc,EAAM8E,EAAMnD,EAAcC,EAAWkD,EAAMhD,uGAGjD,OAAO9B,EAGT,OAAOiZ,GACLG,GAAgBxX,EAAWE,KAxI/BgU,GAAgB7T,QAAU6T,GAAgB7T,QACtC6T,GAAgB7T,QAChB,SAAOR,OAAEN,SAAMoD,qIACT1C,EAAQ0C,EAAgB1C,MACtBG,EAAQJ,EAAUK,QAAQJ,KAMxBwX,EAAuBjJ,MAC3B9E,YAFIA,EAAcnK,IAAShD,EAG3BkN,wBACAD,sBACAD,YAAaxI,EAAIiP,GAAa3P,QAAQoN,QAASxN,GAC/C0J,YAAaqG,GAAa3P,QAAQsJ,aAC/B0K,GAAQhU,UAET0U,EAAQe,GAAuB7V,GAAM,GACrCgV,GAAgB/S,EAAc6S,IAAUiC,GAAe/W,GAGzDyJ,IACC3I,EAAIiP,GAAa3P,QAAQoN,QAASxN,IACnC0N,GAAiBtN,QAAQoN,UAEzBnQ,EAAI0S,GAAa3P,QAAQoN,QAASxN,GAAM,GACxC8U,SACKA,IACHtH,QAASuC,GAAa3P,QAAQoN,WAI9BgK,GACFP,GAAoBjX,QAEhBiC,EAAc6S,IACbE,GAAgB/S,EAAc6S,KACjCrH,GAAgBqH,KAIhBX,GAAY/T,WACW+T,GAAY/T,QACnCgQ,KACA8D,GAAW9T,QACXkU,gCAHM7P,EAAWG,gBAKb0R,EAAsBvG,GAAa3P,QAAQpB,UACjD0F,EAAQ5D,EAAI2D,EAAQzE,KAENmU,GAAY/T,UAClBqX,EAAiBzX,EAAK2J,UAC1B,EACA3J,EAAK0X,YAAY,KAAO1X,EAAK0X,YAAY,KACrC1X,EAAK0X,YAAY,KACjB1X,EAAK0X,YAAY,OAEjBC,EAAe7W,EAAI2D,EAAQgT,EAAgB,KACpCnY,MACXqY,EAAavT,UACZM,EAAQiT,GAGTF,IACCE,GACC7W,EAAIiP,GAAa3P,QAAQqE,OAAQgT,MAEnCzX,EAAOyX,IAIXzY,EAAUiD,EAAcwC,GAEpB6R,IAAwBtX,IAC1BgW,GAAe,gBAIf,SAAMoB,GACJrW,EACAuU,GACAnU,EACAF,YALJyE,EACEE,SAMA5E,oBAGJiX,GAAoBjX,GACpB+U,GAAwB/U,EAAM0E,EAAOsQ,EAAcF,EAAO9V,sCAmDlE,IAAMmR,GAAmB7B,eACvB,SAAO5O,uBAAAA,8FACc,SAAMyU,GAAY/T,iBAE9B+M,GAAiB/M,SACjBgQ,MACA1Q,GAELwU,GAAW9T,QACXkU,mBAPM7P,EAAW7E,gBASbZ,EAAUiD,EAAcwC,GAE9BsL,GAAa3P,QAAQpB,UAAYA,GAC/ByO,GAAgB,CACdzO,yBAGN,CAACsV,KAGGxE,GAA2BxB,eAC/B,SAACnO,EAAcyX,GACb,gBtBlsBJ7X,EACA8X,EACA1X,EACAF,EACAoQ,EACAuH,GAGE,IAAAjZ,EAEEwB,MADFP,EACEO,MADKH,SAAMV,SAETwY,EAAW/X,EAAUK,QAAQJ,GAEnC,IAAKqQ,EAAkB,CACrB,IAAMjU,EAAQ0D,EAAcC,EAAWC,EAAMC,GAExCvB,EAAYtC,IACfiB,EAAI4C,EAAsBG,QAASJ,EAAM5D,GAI7C,GAAKkD,EAKL,IAAKkB,EAAa7B,IAAQ2G,EAAgB3G,KAASmZ,EAAU,CACnD,IAAAC,EAAYD,UAEhBnb,MAAMC,QAAQmb,IAAYA,EAAQna,QACpCV,EAAQ6a,GAAS7O,SAAQ,SAAC/J,EAAQ3B,GACxB,IAAAmB,EAAQQ,OACXR,GAAOoC,EAAWpC,IAAQwD,EAAUhD,EAAQR,IAASiZ,KACxDI,EAAwBrZ,EAAKkZ,GAC7BvW,EAAMyW,EAAS,IAAIva,WAInBua,IAAY7a,EAAQ6a,GAASna,eACxBmC,EAAUK,QAAQJ,WAGpBD,EAAUK,QAAQJ,QAEjBe,EAAWpC,IAAQwD,EAAU2V,EAAUnZ,IAASiZ,KAC1DI,EAAwBrZ,EAAKkZ,UAEtB9X,EAAUK,QAAQJ,gBAzBlBD,EAAUK,QAAQJ,GsB4qBvBiY,CACElY,EACAkU,GAAgB7T,QAChBD,EACAF,GACAoQ,EACAuH,KAEJ,CAACvH,IAGGT,GAAqBtB,eAAkB,SAACtO,WAC5C,GAAIgU,GAAc5T,QAChBqN,UACK,GAAIkG,GAAgB,KACzB,IAAyB,IAAA/O,EAAAf,EAAA8P,GAAevT,uCAAS,CAC/C,WAAe+C,WAAWnD,GAAO,CAC/ByN,KACA,yGAIJwJ,GAAoBjX,MAErB,IAEGkY,GAAiC5J,eACrC,SAACnO,EAAeyX,GACVzX,IACF2P,GAAyB3P,EAAOyX,GAE5BvH,IAAqBnT,EAAQiD,EAAMlB,SAAW,IAAIrB,SACpD0D,EAAMwS,GAAyB1T,QAASD,EAAMxB,IAAIqB,MAClDsB,EAAM0O,GAAe5P,QAASD,EAAMxB,IAAIqB,MACxCsB,EAAM2O,GAAwB7P,QAASD,EAAMxB,IAAIqB,MACjDsB,EAAMyO,GAAa3P,QAAQqE,OAAQtE,EAAMxB,IAAIqB,MAC7C3C,EAAI0S,GAAa3P,QAAQmC,YAAapC,EAAMxB,IAAIqB,MAAM,GAEtDyN,GAAgB,CACdhJ,OAAQsL,GAAa3P,QAAQqE,OAC7BuN,QAASrC,KACTpN,YAAawN,GAAa3P,QAAQmC,cAGpCmL,GAAiBtN,QAAQpB,SACvBmV,GAAY/T,SACZ+P,KACFP,GAAmBzP,EAAMxB,IAAIqB,UAInC,CAACmQ,GAAkBL,KAkCfqI,GAAgB7J,eACpB,SACE8J,EACA7Z,EACA8Z,GAEA,IAAMvP,EAAcuP,EAChBzE,GAAkBxT,QAAQiY,GAC1B1E,GAAevT,QACbkY,EAAwB5Z,EAAYH,GACtC4O,GAAiB/M,QACjB7B,EACAqK,EAAc2O,GAChBxX,EACAE,IACA,EACAmY,GAGF,GAAIlV,EAASkV,GAAa,CACxB,GAAIzK,GAAmBvN,QAAQ0W,IAAIsB,GAAa,CAC9C,IAAMG,EAAkBzX,EACtBwP,EAAoBlQ,QACpBgY,EACA,IAEFxP,EACE2P,EAAgB3a,SACdV,EAAQ4D,EAAI8H,EAAawP,EAAY,KAAKxa,QAC3C2a,EAAgB3a,OAEbgL,EADA0H,EAAoBlQ,QAI5B,OAAOoY,GACL5P,EACAwP,EACAtP,EACApK,EAAYH,GACRuC,EAAIwX,EAAuBF,GAC1B7Z,GACL,GAIJ,OAAI5B,MAAMC,QAAQwb,GACTA,EAAW3Z,QAChB,SAACS,EAAUc,SAAS,cACfd,WACFc,GAAOwY,GACN5P,EACA5I,EACA8I,EACAwP,SAKJ,KAIJtE,GAAc5T,QAAU1B,EAAY2Z,GAE7BhV,GACHpB,EAAc2G,IAAgBA,GAC7B0P,MAGP,IAoCF,SAASG,GACP9Z,EACA+Z,gBAAAA,MA2BQ,IAYJna,EAZIyB,EAAsBrB,OAAhBW,EAAgBX,OAAVvC,EAAUuC,QACxBga,KACJha,OACG+Z,GAECtT,EAASrF,EAAUK,QACnBmF,EAAoBqT,GAA0Bja,GAC9Cka,EAAehL,GAAmBF,GAAmBvN,QAASJ,GAC9D8Y,EAAa,SAACC,GAClB,OAAA7O,MAAWrL,EAAcF,IAAQoa,IAAepa,IAC9CwB,EAAQiF,EAAOpF,GACfgZ,GAAsB,EAG1B,GACE7Y,IACCoF,EACG5I,MAAMC,QAAQuD,EAAMlB,UACpB/B,EAAQiD,EAAMlB,SAASmE,MAAK,SAACjE,GAC3B,OAAO/C,IAAU+C,EAAOR,IAAIvC,OAAS0c,EAAW3Z,EAAOR,QAEzDma,EAAW3Y,EAAMxB,MAErByG,EAAOpF,UACFG,GACAuY,OAXP,CAiBEvY,EADEb,EACMiG,KAEFtG,UACK/B,EAASiD,GAASA,EAAMlB,SAAY,KACvC,CACEN,SAGJA,IAAK,CAAEW,OAAMU,SACV0Y,QAGAC,GAGDA,EAGVvT,EAAOpF,GAAQG,EAEf,IAAM8Y,EAAuBva,EAC3BoC,EAAIb,GAAsBG,QAASJ,IAwCrC,GArCKiC,EAAckL,GAAiB/M,UAAa6Y,IAC/C1a,EAAeuC,EACbmY,EACI9L,GAAiB/M,QACjBH,GAAsBG,QAC1BJ,IAEFgZ,EAAsBta,EAAYH,KAELsa,GAC3BvD,GAActV,EAAMzB,IAInB0D,EAAcyW,KACjBrb,EAAI4S,GAAwB7P,QAASJ,GAAM,IAEtC0K,IAAcgD,GAAiBtN,QAAQpB,SAC1CoX,GACErW,EACAuU,GACAnU,EACAF,IACAiZ,MAAK,SAACxU,GACN,IAAM4R,EAAsBvG,GAAa3P,QAAQpB,QAEjDiD,EAAcyC,GACVrH,EAAI2S,GAAe5P,QAASJ,GAAM,GAClCsB,EAAM0O,GAAe5P,QAASJ,GAE9BsW,IAAwBrU,EAAcyC,IACxC+I,WAOLqG,GAAyB1T,QAAQJ,IAChC6Y,GAAgBG,GAClB,CACA,IAAM5W,EAAatC,EAAcC,EAAWC,EAAMC,IAClD5C,EACEyW,GAAyB1T,QACzBJ,EACAgZ,EACI/a,EAASmE,QACFA,GACLA,EACF7D,IAELsa,GAAgBvX,EAAMyO,GAAa3P,QAAQmC,YAAavC,GAGvDV,YcvhCNM,EACAuZ,EACAtB,OAFElZ,QAIEE,EAAcF,IAAQkZ,IACxBlZ,EAAIya,iBACFD,EAA0B7c,EAAgBA,EAC1Cub,GAEFlZ,EAAIya,iBAAiB9c,EAAaub,Id+gChCwB,CACE9T,GAAqBpF,EAAMlB,QACvBkB,EAAMlB,QAAQkB,EAAMlB,QAAQrB,OAAS,GACrCuC,EACJoF,Ge7hCchG,ef6hCqBZ,Ee7hCjCW,Kf8hCF2U,GAAgB7T,UAuCtB,IAAMkZ,GAAehL,eACnB,SACEiL,EACAC,GACG,OAAA,SAAOC,wHACNA,GAAKA,EAAEC,iBACTD,EAAEC,iBACFD,EAAEE,WAEAC,EAAyC,GACzChR,EAAcwO,GAChBG,GAAgBxX,EAAWE,IAAuB,IAGpDyN,GAAiBtN,QAAQoU,cACvB/G,GAAgB,CACd+G,cAAc,oDAIZL,GAAY/T,WACmB+T,GAAY/T,QAC3CwI,EACAsL,GAAW9T,QACXkU,yBAHI1U,EAAqBsH,SAAnBzC,WAAQ/E,WAKhBqQ,GAAa3P,QAAQqE,OAASmV,EAAcnV,EAC5CmE,EAAclJ,wCAEMkF,EAAAf,EAAAzC,OAAO1B,OAAOK,EAAUK,2DAAjCD,YAGE0Z,EACL1Z,cAEqBiW,GACvBrW,EACAuU,GACAnU,EACAF,oBAJI6Z,EAAa5S,UAOJ2S,IACbxc,EAAIuc,EAAaC,EAAMC,EAAWD,IAClCvY,EAAM0O,GAAe5P,QAASyZ,IACrB/Y,EAAImP,GAAwB7P,QAASyZ,KAC9CvY,EAAMyO,GAAa3P,QAAQqE,OAAQoV,GACnCxc,EAAI2S,GAAe5P,QAASyZ,GAAM,gNAOxC5X,EAAc2X,IACdxY,OAAOC,KAAK0O,GAAa3P,QAAQqE,QAAQ+R,OACvC,SAACxW,GAAS,OAAAA,KAAQD,EAAUK,YAG9BqN,GAAgB,CACdhJ,OAAQ,GACR+P,cAAc,OAEV+E,EAAQ3Q,EAAa6Q,2BAA3BvS,+BAEA6I,GAAa3P,QAAQqE,cAChBsL,GAAa3P,QAAQqE,QACrBmV,GAELJ,KAAoBA,EAAUzJ,GAAa3P,QAAQqE,OAAQgV,mBAA7CvS,4BACduM,YgB1oCRrO,EACAwU,GAEA,IAAK,IAAM9b,KAAOsH,EAChB,GAAItE,EAAI8Y,EAAa9b,GAAM,CACzB,IAAMqC,EAAQiF,EAAOtH,GAErB,GAAIqC,EACF,GAAIA,EAAMxB,IAAIwP,OACZ,GAAIzP,EAAYyB,EAAMxB,IAAIwP,SACxB,WAEG,GAAIhO,EAAMlB,QAAS,CACxBkB,EAAMlB,QAAQ,GAAGN,IAAIwP,QAErB,QhB4nCE4L,CAAkBha,EAAUK,QAAS2P,GAAa3P,QAAQqE,uDAG9DgJ,GAAgB,CACd/D,aAAa,EACb8K,cAAc,EACdC,mBAAoBxS,EAAc8N,GAAa3P,QAAQqE,QACvDA,OAAQsL,GAAa3P,QAAQqE,OAC7B8P,YAAaxE,GAAa3P,QAAQmU,YAAc,oCAItD,CAACd,EAAkBa,KA4ErBzF,aAAgB,WASd,OARAkF,GAAU3T,SAAU,EACpBmT,GAAY7F,GAAiBtN,QAAQpB,SAAWmR,KAEhDyE,GAAYxU,QACVwU,GAAYxU,UAAY8J,GACpB0K,GAAYxU,iBiBzuCpBL,EACAmY,GAKA,IAAM8B,EAAW,IAAIC,kBAAiB,2BACpC,IAAoB,IAAA/T,EAAArC,EAAAzC,OAAO1B,OAAOK,EAAUK,wCAAU,CAAjD,IAAMD,UACT,GAAIA,GAASA,EAAMlB,YACjB,IAAqB,IAAAyH,YAAA7C,EAAA1D,EAAMlB,wCAAS,CAA/B,IAAME,UACLA,GAAUA,EAAOR,KAAOoC,EAAW5B,EAAOR,MAC5CuZ,EAA+B/X,0GAG1BA,GAASY,EAAWZ,EAAMxB,MACnCuZ,EAA+B/X,yGAUrC,OALA6Z,EAASE,QAAQrP,OAAOC,SAAU,CAChCqP,WAAW,EACXC,SAAS,IAGJJ,EjBitCCK,CAAYta,EAAWmY,IAEtB,WACLnE,GAAU3T,SAAU,EACpBwU,GAAYxU,SAAWwU,GAAYxU,QAAQka,aAC3Cra,GAAsBG,QAAU,GAMhCgB,OAAO1B,OAAOK,EAAUK,SAAS8I,SAAQ,SAAC/I,GACxC,OAAA+X,GAA+B/X,GAAO,SAGzC,CAAC+X,MAEC3E,GAAY7F,GAAiBtN,QAAQpB,UACxC0V,GAAU1V,QACRsE,GAAU0M,GAAe5P,QAAS6P,GAAwB7P,UAC1D6B,EAAc8N,GAAa3P,QAAQqE,SAGvC,IAAMsK,GAAc,CAClBxB,WACAH,SAAUkB,eAvuBZ,SAIEtO,EACA5D,EAGAya,GAEAD,GAAiB5W,EAAM5D,EAA+Bya,GACtDE,GAAe/W,IAASyN,KACxBwJ,GAAoBjX,IACnB6W,GAAU,IAAIxI,gBAAkBd,GAAQvN,KA0tBH,CAAC4W,GAAkBrJ,KACzD6C,UAAW9B,cAAkB8B,GAAW,IACxC/C,SAAUiB,eAxNZ,SACEiM,EAKA3N,GAEA,IAAKhC,GACH,GAAI1H,EAASqX,GACX9B,GAAiB,CAAEzY,KAAMua,GAA0B3N,OAC9C,CAAA,IACL3O,EAASsc,MACT,SAAUA,GAIV,OAAO,SAAC5b,GACN,OAAAA,GAAO8Z,GAAiB9Z,EAAK4b,IAH/B9B,GAAiB8B,EAAwB3N,MAyMP,CAACO,GAAiB/M,UACxDkN,WAAYgB,eAjYd,SACEtO,eAEA,IAAwB,IAAA4E,EAAAf,EAAAlH,MAAMC,QAAQoD,GAAQA,EAAO,CAACA,kCAAO,CAAxD,IAAM6I,UACTqP,GAA+BnY,EAAUK,QAAQyI,IAAY,wGA6XrB,KAGtCkE,GAAUyN,WACd,WAAM,UACJ7K,eACAC,sBACAS,mBACA5C,mBACAqC,4BACAqI,iBACA1N,KAAM2J,GAAQhU,QACdkT,eAAgB,CACd/J,sBACAC,yBAEF2G,iBAAkBoD,EAAWpD,QAAmB9R,EAChD0B,YACA8P,8BACA+D,qBACAC,8BACA3D,6BACAF,kBACAC,2BACAtC,sBACAD,oBACAqC,gBACA5C,oBACAlN,yBACAqQ,uBACGvB,MAEL,CACE5B,GAAiB/M,QACjBwP,GACAS,EACAP,GACAqI,KAIJ,UACEsC,MAlbF,SACErC,EACA7Z,GAEA,OAAO4Z,GAAcC,EAAY7Z,IA+ajCwO,WACA2H,UAAW3J,GACP,IAAIC,MAAM0J,GAAW,CACnB5T,IAAK,SAACxC,EAAKoc,GAST,GAAIA,KAAQpc,EAEV,OADAoP,GAAiBtN,QAAQsa,IAAQ,EAC1Bpc,EAAIoc,MAMjBhG,GACJ4E,gBACAnH,MAAO7D,eA7IK,SACZ5O,EACAib,WAEA,gBAFAA,MAEIzQ,OACF,IAAoB,IAAAtF,EAAAf,EAAAzC,OAAO1B,OAAOK,EAAUK,wCAAU,CAAjD,IAAMD,UACT,GAAIA,EAAO,CACD,IAAAxB,EAAiBwB,MAAZlB,EAAYkB,UACnBya,EACJhC,GAA0Bja,IAAQhC,MAAMC,QAAQqC,GAC5CA,EAAQ,GAAGN,IACXA,EAEN,GAAIE,EAAc+b,GAChB,IACEA,EAASC,QAAQ,QAAS1I,QAC1B,MACA,8GAMVpS,EAAUK,QAAU,GACpB+M,GAAiB/M,QAAU6J,GACzBvK,GAAUyN,GAAiB/M,QAC3B8J,IAEFxK,GAAUuX,GAAoB,IAE9B7V,OAAO1B,OAAOmQ,GAA2BzP,SAAS8I,SAChD,SAAC4R,GAAoB,OAAAjT,GAAWiT,IAAoBA,OAGtD7a,GAAsBG,QAAUiQ,EAC5B,GACApG,GAAYvK,EAAQwK,KAAU,GApElB,SAACtK,OACjB6E,WACAuN,YACAtI,gBACA8D,YACAxO,YACAuV,gBACAhS,gBAEKvD,IACHgR,GAAe5P,QAAU,GACzB6P,GAAwB7P,QAAU,IAGpC0T,GAAyB1T,QAAU,GACnC8P,EAA2B9P,QAAU,GACrCuT,GAAevT,QAAU,IAAIkK,IAC7B0J,GAAc5T,SAAU,EAExBqN,GAAgB,CACd8G,YAAaA,EAAcxE,GAAa3P,QAAQmU,YAAc,EAC9DvC,UAASA,GAAUjC,GAAa3P,QAAQ4R,QACxCtI,cAAaA,GAAcqG,GAAa3P,QAAQsJ,YAChD1K,UAASA,GAAU+Q,GAAa3P,QAAQpB,QACxCuD,YAAaA,EAAcwN,GAAa3P,QAAQmC,YAAc,GAC9DiL,QAASA,EAAUuC,GAAa3P,QAAQoN,QAAU,GAClD/I,OAAQA,EAASsL,GAAa3P,QAAQqE,OAAS,GAC/C+P,cAAc,EACdC,oBAAoB,IA0CtBsG,CAAUJ,KAuGsB,IAChCK,YAAa1M,eAnkBf,SACEtO,GAEAA,IACGrD,MAAMC,QAAQoD,GAAQA,EAAO,CAACA,IAAOkJ,SAAQ,SAAC+R,GAC7C,OAAAlb,EAAUK,QAAQ6a,IAAcvd,EAAMud,UAC3BlL,GAAa3P,QAAQqE,OAAOwW,GACnC3Z,EAAMyO,GAAa3P,QAAQqE,OAAQwW,MAG3CxN,GAAgB,CACdhJ,OAAQzE,EAAO+P,GAAa3P,QAAQqE,OAAS,OAwjBH,IAC5CyW,SAAU5M,eArjBZ,SAAkBtO,EAA+B0E,GAC/C,IAAM/F,GAAOoB,EAAUK,QAAQJ,IAAS,IAAKrB,IAE7CtB,EAAI0S,GAAa3P,QAAQqE,OAAQzE,SAC5B0E,IACH/F,SAGF8O,GAAgB,CACdzO,SAAS,EACTyF,OAAQsL,GAAa3P,QAAQqE,SAG/BC,EAAMkO,aAAejU,GAAOA,EAAIwP,OAASxP,EAAIwP,UAwiBP,IACtC1J,OAAQiQ,GAAUjQ,QACfsK,yDkB/yCqCnP,OAC1CmN,YACA/M,SACAzB,iBAEM2O,EAAU9B,KAUVxG,EAKFmI,GAAWG,EAAQH,QAJrB6G,sBACAC,+BACAsE,kBACAhL,qBAEIjH,EAAAkC,EAAoB2F,WACxBrP,EAAYH,GACR2E,EAASlD,GACPc,EAAIqM,EAAiB/M,QAASJ,GAC9BrD,MAAMC,QAAQoD,GACdA,EAAKvB,QACH,SAACS,EAAU+b,SAAc,cACpB/b,WACF+b,GAAYna,EAAIqM,EAAiB/M,QAAS6a,SAE7C,IAEF9N,EAAiB/M,QACnB7B,MAbCnC,OAAOgR,OAeR+N,EAAQjN,WACRkN,EAAkBlN,SAAa3P,GAE/B8c,EAAmB/M,eAAkB,WACzC,IAAMlS,EAAQ+b,EAAcnY,EAAMob,EAAgBhb,QAAS+a,EAAM/a,SACjEgN,EACEnP,EAAS7B,QACAA,GACLO,MAAMC,QAAQR,KACVA,GACJA,KAEL,CAACgR,EAAU+K,EAAeiD,EAAiBpb,EAAMmb,IA+BpD,OA7BAtM,aAAgB,WASd,IAAMyM,EAAMH,EAAM/a,QAAUuM,KACtB4O,EAAwB1H,EAA2BzT,QACnDob,EAAkB5H,EAAkBxT,QAK1C,OAJAob,EAAgBF,GAAM,IAAIhR,IAC1BiR,EAAsBD,GAAMD,EAC5BlD,EAAcnY,EAAMob,EAAgBhb,QAASkb,GAEtC,kBACEE,EAAgBF,UAChBC,EAAsBD,MAE9B,CACDtb,EACAqb,EACAxH,EACAD,EACAuE,EACAiD,IAGM1c,EAAYtC,GAASmC,EAAenC"}