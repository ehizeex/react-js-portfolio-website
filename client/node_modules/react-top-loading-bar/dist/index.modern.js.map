{"version":3,"file":"index.modern.js","sources":["../src/useInterval.ts","../src/utils.ts","../src/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomInt(min: number, max: number): number {\n  // @ts-ignore\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import * as React from 'react'\nimport {\n  // eslint-disable-next-line no-unused-vars\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt } from './utils'\n\ntype IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => void\n  className?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n}\n\nconst LoadingBar = forwardRef(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n    }: IProps,\n    ref\n  ) => {\n    const [localProgress, localProgressSet] = useState<number>(0)\n    const [pressedContinuous, setPressedContinuous] = useState<{\n      active: boolean\n      startingValue: number\n      refreshRate: number\n    }>({ active: false, startingValue: 20, refreshRate: 1000 })\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n        setPressedContinuous({\n          active: true,\n          refreshRate,\n          startingValue,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue: number) {\n        if (pressedContinuous.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little bit\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            // here we wait for it to fade\n            if (pressedContinuous.active) {\n              // if we have continous loader just ending, we kill it and reset it\n              setPressedContinuous({\n                ...pressedContinuous,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const random = randomInt(10, 20)\n\n        if (localProgress + random < 90) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.active ? pressedContinuous.refreshRate : null\n    )\n\n    return (\n      <div className={className} style={loaderContainerStyle}>\n        <div style={loaderStyle}>\n          {shadow ? <div style={shadowStyle} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default LoadingBar\n"],"names":["noop","randomInt","min","max","Math","floor","random","LoadingBar","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","useState","localProgress","localProgressSet","active","startingValue","refreshRate","pressedContinuous","setPressedContinuous","usingProps","setUsingProps","value","pressedStaticStart","setStaticStartPressed","loaderContainerStyle","position","top","left","zIndex","width","initialShadowStyles","boxShadow","opacity","transition","transform","loaderStyle","loaderStyleSet","shadowStyle","shadowStyleSet","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","useEffect","undefined","callback","delay","savedCallback","_progress","setTimeout","_loaderStyle","useRef","current","immediate","id","setInterval","clearInterval","React","style"],"mappings":"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"}