{"ast":null,"code":"var _jsxFileName = \"/Users/ehizeex/Desktop/PORTFOLIOCLONE/Rahul_Malik_Portfolio-release-Production/src/portfolio-container/Home/Header/Header.js\";\nimport React, { useState, useEffect } from 'react';\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from '../../../utilities/commonUtils';\nimport ScrollService from '../../../utilities/ScrollService';\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Header.css';\n\nconst Header = () => {\n  /* STATES TO BE USED */\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = currentScreen => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n    setSelectedScreen(screenIndex);\n  };\n  /* SUBSCRIPTIONS */\n\n\n  let currentScreenSubscription = ScrollService.currentScreenBroadcaster.subscribe(updateCurrentScreen);\n\n  const getHeaderOptions = () => {\n    return TOTAL_SCREENS.map((Screen, i) => /*#__PURE__*/React.createElement(\"div\", {\n      key: Screen.screen_name,\n      className: getHeaderOptionsClasses(i),\n      onClick: () => switchScreen(i, Screen),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 18\n      }\n    }, Screen.screen_name)));\n  };\n\n  const getHeaderOptionsClasses = index => {\n    let classes = \"header-option \";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-seperator \";\n    if (selectedScreen === index) classes += \"selected-header-option \";\n    return classes;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n    screenComponent.scrollIntoView({\n      behavior: 'smooth'\n    });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  useEffect(() => {\n    return () => {\n      /* UNSUBSCRIBE THE SUBSCRIPTIONS */\n      currentScreenSubscription.unsubscribe();\n    };\n  }, [currentScreenSubscription]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-parent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-hamburger\",\n    onClick: () => setShowHeaderOptions(!showHeaderOptions),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"header-hamburger-bars\",\n    icon: faBars,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, \"RM.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: showHeaderOptions ? \"header-options show-hamburger-options\" : \"header-options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, getHeaderOptions())));\n};\n\nexport default Header;","map":{"version":3,"sources":["/Users/ehizeex/Desktop/PORTFOLIOCLONE/Rahul_Malik_Portfolio-release-Production/src/portfolio-container/Home/Header/Header.js"],"names":["React","useState","useEffect","TOTAL_SCREENS","GET_SCREEN_INDEX","ScrollService","faBars","FontAwesomeIcon","Header","selectedScreen","setSelectedScreen","showHeaderOptions","setShowHeaderOptions","updateCurrentScreen","currentScreen","screenInView","screenIndex","currentScreenSubscription","currentScreenBroadcaster","subscribe","getHeaderOptions","map","Screen","i","screen_name","getHeaderOptionsClasses","switchScreen","index","classes","length","screen","screenComponent","document","getElementById","scrollIntoView","behavior","unsubscribe"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from '../../../utilities/commonUtils';\nimport ScrollService from '../../../utilities/ScrollService';\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Header.css';\n\nconst Header = () => {\n\n    /* STATES TO BE USED */\n    const [selectedScreen, setSelectedScreen] = useState(0);\n    const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n    const updateCurrentScreen = (currentScreen) => {\n        if(!currentScreen || !currentScreen.screenInView)\n        return;\n        \n        let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n        if(screenIndex < 0)\n        return;\n\n        setSelectedScreen(screenIndex);\n    }\n\n    /* SUBSCRIPTIONS */\n    let currentScreenSubscription = ScrollService.currentScreenBroadcaster.subscribe(updateCurrentScreen);\n\n    const getHeaderOptions = () => {\n        return (\n          TOTAL_SCREENS.map((Screen,i) => (\n            <div key={Screen.screen_name} className={getHeaderOptionsClasses(i)}\n                onClick={() => switchScreen(i,Screen)}\n            >\n                 <span>{Screen.screen_name}</span>\n            </div>\n          ))\n        )\n    }\n\n    const getHeaderOptionsClasses = (index) => {\n        let classes = \"header-option \";\n        if(index < TOTAL_SCREENS.length-1)\n        classes+= \"header-option-seperator \";\n\n        if(selectedScreen === index)\n        classes+= \"selected-header-option \";\n        \n        return classes;\n    }\n\n    const switchScreen = (index, screen) => {\n        let screenComponent = document.getElementById(screen.screen_name);\n        if(!screenComponent)\n        return;\n\n        screenComponent.scrollIntoView({ behavior: 'smooth' });\n        setSelectedScreen(index);\n        setShowHeaderOptions(false);\n    }\n\n    useEffect(() => {\n        return () => {\n            /* UNSUBSCRIBE THE SUBSCRIPTIONS */\n            currentScreenSubscription.unsubscribe();\n        }\n      }, [currentScreenSubscription]);\n\n    return (\n        <div className=\"header-container\">\n            <div className=\"header-parent\">\n                <div className=\"header-hamburger\" onClick={() => setShowHeaderOptions(!showHeaderOptions)}>\n                    <FontAwesomeIcon className=\"header-hamburger-bars\" icon={faBars} />\n                </div>\n                <div className=\"header-logo\">\n                    <span>RM.</span>\n                </div>\n                <div className={(showHeaderOptions) ? \"header-options show-hamburger-options\" : \"header-options\"}>\n                    { getHeaderOptions() }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}