{"ast":null,"code":"/***********************/\n\n/* MAIN API SERVICE ****/\n\n/***********************/\nimport axios from \"axios\";\nimport LoaderService from \"../loader-service/loader-service\";\nimport { toast } from 'react-toastify';\nimport { BASE_URL } from \"./api-urls\";\nexport default class MainService {\n  //INTERCEPT REQUEST\n  //INTERCEPT RESPONSE\n  //HANDLE HTTP REQUEST ERROR\n  constructor() {\n    this.requestInterceptor = config => {\n      console.log(config); //Start the loader\n\n      LoaderService.start();\n      return config;\n    };\n\n    this.responseInterceptor = config => {\n      console.log(config);\n      if (!config || !config.data) return config;\n      let result = config.data; //Stop the loader\n\n      LoaderService.complete(); //Show Toast\n\n      if (result && result.success) {\n        toast.success(result.message);\n      } else if (result && !result.success) {\n        toast.error(result.message);\n      }\n\n      return result;\n    };\n\n    this.handleError = err => {\n      //Stop the loader and show the error\n      LoaderService.complete();\n      toast.error(err.message);\n      Promise.reject(err);\n    };\n\n    /* MAIN HTTP REQUEST CLIENT */\n    this.HTTP_CLIENT = axios.create({\n      baseURL: BASE_URL,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }); //Attach Interceptors\n\n    this.HTTP_CLIENT.interceptors.request.use(this.requestInterceptor, this.handleError);\n    this.HTTP_CLIENT.interceptors.response.use(this.responseInterceptor, this.handleError);\n  }\n\n  regularPostRequest(url, body) {\n    return this.HTTP_CLIENT.post(url, body);\n  }\n\n}","map":{"version":3,"sources":["/Users/ehizeex/Desktop/PORTFOLIOCLONE/Ehiz_Portfolio/client/src/services/api-services/main-service.js"],"names":["axios","LoaderService","toast","BASE_URL","MainService","constructor","requestInterceptor","config","console","log","start","responseInterceptor","data","result","complete","success","message","error","handleError","err","Promise","reject","HTTP_CLIENT","create","baseURL","headers","interceptors","request","use","response","regularPostRequest","url","body","post"],"mappings":"AAAA;;AACA;;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC/B;AAQA;AAqBA;AASAC,EAAAA,WAAW,GAAG;AAAA,SArCdC,kBAqCc,GArCQC,MAAD,IAAY;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAD+B,CAE/B;;AACAN,MAAAA,aAAa,CAACS,KAAd;AACA,aAAOH,MAAP;AACD,KAgCa;;AAAA,SA7BdI,mBA6Bc,GA7BSJ,MAAD,IAAY;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,UAAG,CAACA,MAAD,IAAW,CAACA,MAAM,CAACK,IAAtB,EACA,OAAOL,MAAP;AAEA,UAAIM,MAAM,GAAGN,MAAM,CAACK,IAApB,CALgC,CAOhC;;AACAX,MAAAA,aAAa,CAACa,QAAd,GARgC,CAUhC;;AACA,UAAGD,MAAM,IAAIA,MAAM,CAACE,OAApB,EAA6B;AAC3Bb,QAAAA,KAAK,CAACa,OAAN,CAAcF,MAAM,CAACG,OAArB;AACD,OAFD,MAEO,IAAGH,MAAM,IAAI,CAACA,MAAM,CAACE,OAArB,EAA8B;AACnCb,QAAAA,KAAK,CAACe,KAAN,CAAYJ,MAAM,CAACG,OAAnB;AACD;;AAED,aAAOH,MAAP;AACD,KAWa;;AAAA,SARdK,WAQc,GARCC,GAAD,IAAS;AACrB;AACAlB,MAAAA,aAAa,CAACa,QAAd;AACAZ,MAAAA,KAAK,CAACe,KAAN,CAAYE,GAAG,CAACH,OAAhB;AAEAI,MAAAA,OAAO,CAACC,MAAR,CAAeF,GAAf;AACD,KAEa;;AACZ;AACA,SAAKG,WAAL,GAAmBtB,KAAK,CAACuB,MAAN,CAAa;AAC9BC,MAAAA,OAAO,EAAErB,QADqB;AAE9BsB,MAAAA,OAAO,EAAE;AAAE,wBAAgB,kBAAlB;AACE,uCAAgC;AADlC;AAFqB,KAAb,CAAnB,CAFY,CAQZ;;AACA,SAAKH,WAAL,CAAiBI,YAAjB,CAA8BC,OAA9B,CAAsCC,GAAtC,CACE,KAAKtB,kBADP,EAC2B,KAAKY,WADhC;AAEA,SAAKI,WAAL,CAAiBI,YAAjB,CAA8BG,QAA9B,CAAuCD,GAAvC,CACE,KAAKjB,mBADP,EAC4B,KAAKO,WADjC;AAED;;AAEDY,EAAAA,kBAAkB,CAACC,GAAD,EAAMC,IAAN,EAAY;AAC5B,WAAO,KAAKV,WAAL,CAAiBW,IAAjB,CAAsBF,GAAtB,EAA2BC,IAA3B,CAAP;AACD;;AAxD8B","sourcesContent":["/***********************/\n/* MAIN API SERVICE ****/\n/***********************/\n\nimport axios from \"axios\";\nimport LoaderService from \"../loader-service/loader-service\"\nimport { toast } from 'react-toastify';\nimport { BASE_URL } from \"./api-urls\";\n\nexport default class MainService {\n  //INTERCEPT REQUEST\n  requestInterceptor = (config) => {\n    console.log(config)\n    //Start the loader\n    LoaderService.start();\n    return config;\n  };\n\n  //INTERCEPT RESPONSE\n  responseInterceptor = (config) => {\n    console.log(config)\n    if(!config || !config.data)\n    return config;\n\n    let result = config.data;\n\n    //Stop the loader\n    LoaderService.complete();\n\n    //Show Toast\n    if(result && result.success) {\n      toast.success(result.message);\n    } else if(result && !result.success) {\n      toast.error(result.message);\n    }\n\n    return result;\n  };\n\n  //HANDLE HTTP REQUEST ERROR\n  handleError = (err) => {\n    //Stop the loader and show the error\n    LoaderService.complete();\n    toast.error(err.message);\n\n    Promise.reject(err);\n  };\n\n  constructor() {\n    /* MAIN HTTP REQUEST CLIENT */\n    this.HTTP_CLIENT = axios.create({\n      baseURL: BASE_URL,\n      headers: { \"Content-Type\": \"application/json\",\n                 \"Access-Control-Allow-Origin\" : \"*\"  }\n    });\n\n    //Attach Interceptors\n    this.HTTP_CLIENT.interceptors.request.use(\n      this.requestInterceptor, this.handleError);\n    this.HTTP_CLIENT.interceptors.response.use(\n      this.responseInterceptor, this.handleError);\n  }\n\n  regularPostRequest(url, body) {\n    return this.HTTP_CLIENT.post(url, body);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}